import datetime
import pickle, sys
from pathlib import Path

import pytz

from AdminApp.exceptions import UnstoredTrip
from data.database import Database
from AdminApp.filereaders import verify_files, page_number_remover, number_of_trips_in_pbs_file, create_trips_as_dict
from AdminApp.objectbuilders import create_trips
from models.scheduleclasses import Trip, Airport, Itinerary, Flight, Route, Equipment, DutyDay
from models.timeclasses import Duration
from datetime import datetime

files_list = []
Database.initialise(database="orgutrip", user="postgres", password="0933", host="localhost")
data_folder = Path("C:/Users/Xico/Google Drive/Sobrecargo/PBS/2019 PBS/201905 PBS")
pickled_unsaved_trips_file = 'unsaved_trips.txt'


class Menu:
    """Display a menu and respond to choices when run"""

    def __init__(self):
        self.choices = {
            "1": self.choose_trip_files,
            "2": self.parse_trips_from_files,
            "3": self.figure_out_unsaved_trips,
            "4": self.search_for_trip,
            "5": self.create_new_trip,
            "6": self.choose_reserve_files,
            "7": self.parse_reserves_from_files,
            "10": self.quit}

    @staticmethod
    def display_menu():
        print('''
        Orgutrip Menu

        1. Elejir los archivos con los trips.
        2. Leer cada archivo con los trips y generar los objetos.
        3. Trabajar con los trips que no pudieron ser creados.
        4. Buscar un trip en especìfico.
        5. Crear un trip manualmente.
        6. Elegir los archivos con las reservas.
        7. Leer cada archivo con las reservas y generar los objetos.
        10. Quit
        ''')

    def run(self):
        """Display the menu and respond to choices"""
        while True:
            self.display_menu()
            choice = input("¿Qué deseas realizar?: ")
            action = self.choices.get(choice)
            if action:
                action()
            else:
                print("{0} is not a valid choice".format(choice))

    def choose_trip_files(self):
        """This option chooses the files that are to be read and turned into meaningful data

                """
        global files_list, data_folder
        file_names = ["201905 - PBS vuelos SOB B.txt",
                      "201905 - PBS vuelos EJE.txt"]
        files_list = verify_files(data_folder, file_names)

    def parse_trips_from_files(self):
        """Will read each pbs trip file and turn it into usable dictionaries

        First run: from scattered data in the pbs file to readable strings
        Second run: from strings into dictionaries
        Third run: from dictionaries into objects"""

        global files_list, data_folder
        unstored_trips = list()
        for file in files_list:
            # First Run. Read in and clean the txt.file
            print("\n Parsing file : {}".format(file))
            position = input("Is this a PBS file for EJE or SOB? ").upper()
            trip_base = input("Enter iata_code for PBS-file trip base: ")
            cleaned_content = page_number_remover(file)
            total_trips_in_pbs_file = number_of_trips_in_pbs_file(cleaned_content)
            trips_as_dict = create_trips_as_dict(trips_as_strings=cleaned_content, crew_position=position,
                                                 trip_base=trip_base)
            if total_trips_in_pbs_file != len(trips_as_dict):
                print("Warning! {} trips should be processed but only {} were found".format(
                    total_trips_in_pbs_file, len(trips_as_dict)
                ))
            pending_trips = create_trips(trips_as_dict, postpone=True)
            print("{} trips contained in PBS pdf file".format(total_trips_in_pbs_file))
            print("{} trips were not built!".format(len(pending_trips)))
            unstored_trips.extend(pending_trips)
        outfile = open(data_folder / pickled_unsaved_trips_file, 'wb')
        pickle.dump(unstored_trips, outfile)
        outfile.close()

    def figure_out_unsaved_trips(self):
        infile = open(data_folder / pickled_unsaved_trips_file, 'rb')
        unstored_trips = pickle.load(infile)
        infile.close()
        print("Building {} unsaved_trips :".format(len(unstored_trips)))
        # 1. Let us go over all trips again, some might now be discarded
        irreparable_trips = create_trips(trips_as_dict=unstored_trips, postpone=False)
        print(" {} unsaved_trips".format(len(irreparable_trips)))
        outfile = open(data_folder / pickled_unsaved_trips_file, 'wb')
        pickle.dump(irreparable_trips, outfile)
        outfile.close()

    def search_for_trip(self):
        entered = input("Enter trip/dated to search for ####/YYYY-MM-DD ")
        trip_id, trip_dated = entered.split('/')
        trip = Trip.load_by_id(trip_id, trip_dated)
        trip.astimezone(timezone='local')
        print(trip)

    def create_new_trip(self):
        """Manually create and store a new trip"""
        print("Enter trip info  #4digit number, dated YYYY-MM-DD, crew_position, trip_base")
        trip_number, trip_date, crew_position, trip_base = input().split()
        trip_base = Airport(iata_code='MEX')
        try:
            trip = Trip.load_trip_info(trip_number=trip_number, dated=trip_date)
            print("Trip is already stored in the DB")
        except UnstoredTrip:
            trip = Trip(number=trip_number, dated=trip_date, crew_position=crew_position, trip_base=trip_base)
            duty_days_len = int(input("How many duty days in trip? "))
            for e in range(duty_days_len):
                duty_day = DutyDay()
                ans = True
                while ans:
                    input_string = input("Enter flight v.gr DDMMYYYY AM0636 ORG DES ETDE BLCK EQP : ")
                    flight_date, flight_name, origin_airport, destination_airport, etd, block, \
                    airplane_code = input_string.upper().split()
                    origin = Airport(iata_code=origin_airport)
                    destination = Airport(iata_code=destination_airport)
                    route = Route(name=flight_name[-4:], origin=origin, destination=destination, route_id=None)
                    equipment = Equipment(airplane_code=airplane_code, cabin_members=0)
                    dh = flight_name.startswith('DH')
                    if dh:
                        carrier = input("Enter carrier iata code ")
                    else:
                        carrier = 'AM'
                    begin = pytz.utc.localize(datetime.strptime(flight_date+etd, "%d%m%Y%H%M"))
                    duration = Duration.from_string(value=block)
                    itinerary = Itinerary.from_timedelta(begin=begin, a_timedelta=duration.as_timedelta())
                    flight = Flight(route=route, scheduled_itinerary=itinerary, equipment=equipment,
                                    carrier=carrier, dh=dh, position=crew_position)
                    duty_day.append(flight)
                    ans = eval(input("Enter another flight? True/False "))
                trip.append(duty_day)
        trip.save_to_db()
        trip.astimezone(timezone='local')
        print(trip)

    def choose_reserve_files(self):
        pass

    def parse_reserves_from_files(self):
        pass

    def quit(self):
        print("adiós")
        sys.exit(0)


if __name__ == '__main__':
    Menu().run()
